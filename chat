
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Mic, MicOff, Video, VideoOff, PhoneOff, SkipForward, AlertTriangle, Loader2, Users } from 'lucide-react';
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";

const VideoPlaceholder = ({ label, status, onRetry, connectionState }) => {
  const renderContent = () => {
    if (label === "Stranger's Video") {
      switch (connectionState) {
        case 'searching':
          return (
            <>
              <Loader2 className="w-16 h-16 text-blue-500 mx-auto mb-4 animate-spin" />
              <p className="text-blue-400 font-semibold">Searching for a stranger...</p>
              <p className="text-xs text-gray-500">Please wait a moment.</p>
            </>
          );
        case 'connected':
          return (
            <>
              <Users className="w-16 h-16 text-gray-600 mx-auto mb-4" />
              <p className="text-gray-400 font-semibold">{label}</p>
              <p className="text-xs text-gray-500">This is a visual placeholder.</p>
            </>
          );
        default:
          // Default state for stranger's video if not searching/connected, or an unknown state
          return (
            <>
              <VideoOff className="w-16 h-16 text-gray-600 mx-auto mb-4" />
              <p className="text-gray-400 font-semibold">{label}</p>
              <p className="text-xs text-gray-500">Video feed is not available</p>
            </>
          );
      }
    }

    // Existing logic for 'Your Video' based on permission status
    switch (status) {
      case 'pending':
        return (
          <>
            <Loader2 className="w-16 h-16 text-gray-600 mx-auto mb-4 animate-spin" />
            <p className="text-gray-400 font-semibold">Requesting access...</p>
            <p className="text-xs text-gray-500">Please allow camera and mic access in your browser.</p>
          </>
        );
      case 'denied':
        return (
          <>
            <VideoOff className="w-16 h-16 text-red-500 mx-auto mb-4" />
            <p className="text-red-400 font-semibold">Access Denied</p>
            <p className="text-xs text-gray-500 mb-3">Camera and mic access is required to chat.</p>
            <Button onClick={onRetry} size="sm">Try Again</Button>
          </>
        );
      default:
        return (
          <>
            <VideoOff className="w-16 h-16 text-gray-600 mx-auto mb-4" />
            <p className="text-400 font-semibold">{label}</p>
            <p className="text-xs text-gray-500">Video feed is not available</p>
          </>
        );
    }
  };

  return (
    <div className="w-full h-full bg-black rounded-lg flex items-center justify-center relative overflow-hidden">
      <div className="absolute inset-0 bg-grid-gray-700/[0.2]"></div>
      <div className="z-10 text-center">{renderContent()}</div>
    </div>
  );
};


export default function ChatPage() {
  const [stream, setStream] = useState(null);
  const [permissionStatus, setPermissionStatus] = useState('pending'); // pending, granted, denied
  const [connectionState, setConnectionState] = useState('searching'); // searching, connected
  const [isMicOn, setIsMicOn] = useState(true);
  const [isCameraOn, setIsCameraOn] = useState(true);
  co
